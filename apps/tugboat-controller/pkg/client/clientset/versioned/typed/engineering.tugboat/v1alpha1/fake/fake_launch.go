/*
LICENSE
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/object88/tugboat/apps/tugboat-controller/pkg/apis/engineering.tugboat/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeLaunches implements LaunchInterface
type FakeLaunches struct {
	Fake *FakeTugboatV1alpha1
	ns   string
}

var launchesResource = schema.GroupVersionResource{Group: "tugboat.engineering", Version: "v1alpha1", Resource: "launches"}

var launchesKind = schema.GroupVersionKind{Group: "tugboat.engineering", Version: "v1alpha1", Kind: "Launch"}

// Get takes name of the launch, and returns the corresponding launch object, and an error if there is any.
func (c *FakeLaunches) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.Launch, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(launchesResource, c.ns, name), &v1alpha1.Launch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Launch), err
}

// List takes label and field selectors, and returns the list of Launches that match those selectors.
func (c *FakeLaunches) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.LaunchList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(launchesResource, launchesKind, c.ns, opts), &v1alpha1.LaunchList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.LaunchList{ListMeta: obj.(*v1alpha1.LaunchList).ListMeta}
	for _, item := range obj.(*v1alpha1.LaunchList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested launches.
func (c *FakeLaunches) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(launchesResource, c.ns, opts))

}

// Create takes the representation of a launch and creates it.  Returns the server's representation of the launch, and an error, if there is any.
func (c *FakeLaunches) Create(ctx context.Context, launch *v1alpha1.Launch, opts v1.CreateOptions) (result *v1alpha1.Launch, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(launchesResource, c.ns, launch), &v1alpha1.Launch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Launch), err
}

// Update takes the representation of a launch and updates it. Returns the server's representation of the launch, and an error, if there is any.
func (c *FakeLaunches) Update(ctx context.Context, launch *v1alpha1.Launch, opts v1.UpdateOptions) (result *v1alpha1.Launch, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(launchesResource, c.ns, launch), &v1alpha1.Launch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Launch), err
}

// Delete takes name of the launch and deletes it. Returns an error if one occurs.
func (c *FakeLaunches) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(launchesResource, c.ns, name), &v1alpha1.Launch{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeLaunches) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(launchesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.LaunchList{})
	return err
}

// Patch applies the patch and returns the patched launch.
func (c *FakeLaunches) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Launch, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(launchesResource, c.ns, name, pt, data, subresources...), &v1alpha1.Launch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Launch), err
}
