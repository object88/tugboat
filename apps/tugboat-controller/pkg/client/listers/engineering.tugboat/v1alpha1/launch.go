/*
LICENSE
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/object88/tugboat/apps/tugboat-controller/pkg/apis/engineering.tugboat/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LaunchLister helps list Launches.
type LaunchLister interface {
	// List lists all Launches in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Launch, err error)
	// Launches returns an object that can list and get Launches.
	Launches(namespace string) LaunchNamespaceLister
	LaunchListerExpansion
}

// launchLister implements the LaunchLister interface.
type launchLister struct {
	indexer cache.Indexer
}

// NewLaunchLister returns a new LaunchLister.
func NewLaunchLister(indexer cache.Indexer) LaunchLister {
	return &launchLister{indexer: indexer}
}

// List lists all Launches in the indexer.
func (s *launchLister) List(selector labels.Selector) (ret []*v1alpha1.Launch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Launch))
	})
	return ret, err
}

// Launches returns an object that can list and get Launches.
func (s *launchLister) Launches(namespace string) LaunchNamespaceLister {
	return launchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LaunchNamespaceLister helps list and get Launches.
type LaunchNamespaceLister interface {
	// List lists all Launches in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Launch, err error)
	// Get retrieves the Launch from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Launch, error)
	LaunchNamespaceListerExpansion
}

// launchNamespaceLister implements the LaunchNamespaceLister
// interface.
type launchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Launches in the indexer for a given namespace.
func (s launchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Launch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Launch))
	})
	return ret, err
}

// Get retrieves the Launch from the indexer for a given namespace and name.
func (s launchNamespaceLister) Get(name string) (*v1alpha1.Launch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("launch"), name)
	}
	return obj.(*v1alpha1.Launch), nil
}
