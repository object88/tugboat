// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notifier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ListenerClient is the client API for Listener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListenerClient interface {
	OpenDeployment(ctx context.Context, in *StartDeploymentRequest, opts ...grpc.CallOption) (*StartDeploymentResponse, error)
}

type listenerClient struct {
	cc grpc.ClientConnInterface
}

func NewListenerClient(cc grpc.ClientConnInterface) ListenerClient {
	return &listenerClient{cc}
}

func (c *listenerClient) OpenDeployment(ctx context.Context, in *StartDeploymentRequest, opts ...grpc.CallOption) (*StartDeploymentResponse, error) {
	out := new(StartDeploymentResponse)
	err := c.cc.Invoke(ctx, "/notifier.Listener/OpenDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerServer is the server API for Listener service.
// All implementations must embed UnimplementedListenerServer
// for forward compatibility
type ListenerServer interface {
	OpenDeployment(context.Context, *StartDeploymentRequest) (*StartDeploymentResponse, error)
	mustEmbedUnimplementedListenerServer()
}

// UnimplementedListenerServer must be embedded to have forward compatible implementations.
type UnimplementedListenerServer struct {
}

func (UnimplementedListenerServer) OpenDeployment(context.Context, *StartDeploymentRequest) (*StartDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDeployment not implemented")
}
func (UnimplementedListenerServer) mustEmbedUnimplementedListenerServer() {}

// UnsafeListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenerServer will
// result in compilation errors.
type UnsafeListenerServer interface {
	mustEmbedUnimplementedListenerServer()
}

func RegisterListenerServer(s grpc.ServiceRegistrar, srv ListenerServer) {
	s.RegisterService(&_Listener_serviceDesc, srv)
}

func _Listener_OpenDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).OpenDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifier.Listener/OpenDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).OpenDeployment(ctx, req.(*StartDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Listener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.Listener",
	HandlerType: (*ListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenDeployment",
			Handler:    _Listener_OpenDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify.proto",
}
